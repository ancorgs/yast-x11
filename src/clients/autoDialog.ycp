/**
 * File:	include/autoinstall/x11_dialogs.ycp
 * Summary:	Handle X11 dialogs
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 */
{
    textdomain "autoinst";


    include "wizard/sequencer.ycp";
    import "Label";




  
    global define term updateContents() ``{
	map x11 = AutoinstX11::x11;
	list resolutions        = [];
	list resolutions_list = ["640x480", "800x600", "1024x768", "1152x864", "1280x960", "1280x1024", "1600x1200"];
	list depths_list = [
			    $[
			      "desc"	:_("8 Bit / 256 Colors"),
			      "depth"	: 8
			    ],
			      $[
				"desc"	:_("15 Bit / 32 K Colors (PPC)"),
				"depth"	: 15
			      ],
			      $[
				"desc"	:_("16 Bit / 64 K Colors"),
				"depth"	: 16
			      ],
			      $[
				"desc"	:_("24 Bit / 16 M Colors"),
				"depth"	: 24
			      ],
			      $[
				"desc"	:_("32 Bit / 16 M Colors"),
				"depth"	: 32
			      ]
	];


	foreach(string res, resolutions_list , ``{
	    resolutions=add(resolutions, `item( `id(res), res, (res == x11["resolution"]:"1024x768")));
	});
	list color_depths       = [];

	foreach(map d, depths_list , ``{
	    color_depths=add(color_depths, `item( `id(d["depth"]:16), d["desc"]:_("16 Bit / 64 K Colors") , ( d["depth"]:16 == x11["color_depth"]:16)));
	});

	term contents =
	    `Top(
		 `VBox(
		       `Frame( _("&General Options:"),
			       `VBox(
				     `Left(
					   `CheckBox(
						     `id(`enable_x11),
						     `opt(`notify),
						     _("&Configure the X Window System"),
						     x11["configure_x11"]:false)
					   ),
				     `Left(
					   `CheckBox(
						     `id(`enable_3d),
						     _("&Enable 3D Support if possible"),
						     x11["enable_3d"]:false)
					   ),
				     `Left(
					   `CheckBox(
						     `id(`start_x11),
						     // This sets the runlevel to 5.
						     _("&Start the X Window System on boot"), x11["start_x11"]:false
						     )),
				     `VSpacing(1),
				     `HBox(
					   `HWeight(50,
						    `ComboBox(`id(`depth),
							      _("Co&lor Depth"),
							      color_depths
							      )),
					   `HSpacing(1),
					   `HWeight(50,`ComboBox(`id(`resolution), _("Resol&ution"),
								 resolutions
								 )
						    )
					   )
				     )
			       ),
		       `Frame( _("Display &Manager:"),
			       `VBox(
				     `HBox(
					   `HWeight(30, `ComboBox(`id(`dm), _("&Display Manager"),
								  [
								   `item(`id	("kdm"), _("KDM"), (x11["display_manager"]:"kdm" == "kdm")),
								   `item(`id("gdm"), _("GDM"), (x11["display_manager"]:"kdm" == "gdm"))
								   ]
								  )),
					   `HWeight(70,`Empty())
					   )
				     )
			       )		     
		       )
		 );
	return contents;
    }




   /**
     * X11 Options
     */
    global define symbol x11Options()
	``{


	string caption = _("X11 Configuration");
	boolean x11_enabled = AutoinstX11::x11["configure_x11"]:false;



	string help = _("<p>Use this dialog to configure the X11 system and the
display attached to the computer to install.</P>
");
	help = help + _("<P>Additionally, configure if the X11 system should
be started at boot time and what display manager should be used.</p>
");

	Wizard::SetContents(caption,
			    updateContents(), help, true, true);

	
	Wizard::ReplaceAbortButton(`Empty());
	UI::ChangeWidget(`id(`next), `Label, Label::FinishButton());

	if (!x11_enabled) {
	    UI::ChangeWidget(`id(`depth), `Enabled, false);
	    UI::ChangeWidget(`id(`resolution), `Enabled, false);
	    UI::ChangeWidget(`id(`dm), `Enabled, false);
	    UI::ChangeWidget(`id(`enable_3d), `Enabled, false);
	    UI::ChangeWidget(`id(`start_x11), `Enabled, false);
	    
	}

	any ret = nil;
	repeat {
	    ret = UI::UserInput();


	    if ((boolean)UI::QueryWidget(`id(`enable_x11), `Value))
	    {
		UI::ChangeWidget(`id(`depth), `Enabled, true);
		UI::ChangeWidget(`id(`resolution), `Enabled, true);
		UI::ChangeWidget(`id(`dm), `Enabled, true);
		UI::ChangeWidget(`id(`enable_3d), `Enabled, true);
		UI::ChangeWidget(`id(`start_x11), `Enabled, true);		
	    }
	    else
	    {
		UI::ChangeWidget(`id(`depth), `Enabled, false);
		UI::ChangeWidget(`id(`resolution), `Enabled, false);
		UI::ChangeWidget(`id(`dm), `Enabled, false);
		UI::ChangeWidget(`id(`enable_3d), `Enabled, false);
		UI::ChangeWidget(`id(`start_x11), `Enabled, false);		
	    }

	    if (ret == `key || ret ==`next  )
	    {
		AutoinstX11::x11["configure_x11"]	= (boolean)UI::QueryWidget(`id(`enable_x11), `Value);

		any depth	= UI::QueryWidget(`id(`depth), `Value);
		if (is(depth, integer))
		    AutoinstX11::x11["color_depth"] =  depth ;

		any resol	= UI::QueryWidget(`id(`resolution), `Value);
		if (is(resol, string))
		    AutoinstX11::x11["resolution"] =  resol;

		any default_dm	= UI::QueryWidget(`id(`dm), `Value);
		if (is(default_dm, string))
		{
		    AutoinstX11::x11["display_manager"] =  default_dm;
		    
		    if (default_dm == "kdm")
			AutoinstX11::x11["window_manager"] =  "kde";
		    else if (default_dm == "gdm")
			AutoinstX11::x11["window_manager"] =  "gnome";
		    else if (default_dm == "xdm")
			AutoinstX11::x11["window_manager"] =  "twm";
		}

		any enable_3d	= UI::QueryWidget(`id(`enable_3d), `Value);
		if (is(enable_3d, boolean))
		    AutoinstX11::x11["enable_3d"] = enable_3d;

		any xdm	= UI::QueryWidget(`id(`start_x11), `Value);
		if (is(xdm, boolean))
		    AutoinstX11::x11["start_x11"] =  xdm;
	    }

	    
	} until (  ret ==`next || ret ==`back );


	return (symbol)ret;
    }






    
    global define symbol X11AutoSequence () ``{

	map dialogs = $[
			"x11"		:	``(   x11Options() )

	];

	map sequence = $[
			 "ws_start"	: "x11",
			 "x11"	:
			 $[
			   `abort	: `abort,
			   `next	: `next
			 ]
	];

	Wizard::CreateDialog ();
	symbol ret  =  WizardSequencer (dialogs, sequence);
	UI::CloseDialog ();

	return ret;
    }


  

 
}
