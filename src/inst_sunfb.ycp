/**
 *
 * $Id$
 *
 * Module:		inst_sunfb.ycp
 *
 * Author:		Thorsten Kukuk <kukuk@suse.de>
 *
 * Purpose:		Create /etc/XF86Config for Sun Framebuffer Cards.
 *
 * user_settings:	monitor ( x11 or not )
 *			current_xserver
 */
{
    textdomain "x11";

    import "Arch";
    import "Wizard";

    
   //
   // if the user doesn't want X11 at all proceed immediately
   //
   if ( ! lookup(user_settings,"have_x11",true ) )
   {
	// Doing nothing cause there was no X-Server installed
	return `auto;
   }


   //************************************************************************
   // global variables
   //*****************

   // get the two possible xservers for 3D / non3D
   //
   map xservers   = lookup(user_settings, "xservers", $[]);
   map xserver_3d = lookup(xservers, "xserver_3d", $[]);
   map xserver    = lookup(xservers, "xserver", $[]);

   y2debug("xserver_3d: %1", xserver_3d );
   y2debug("xserver: %1", xserver );

   //
   // In the beginning it is the non3D case
   //
   map current_xserver = xserver;

   //
   // look if we do have 3D acceleration at all. On SPARC we use the 3D acceleration
   // if possible and don't let the use decide. In the moment the 3D cards does not work
   // very good without.
   //
   boolean have_3d_accel = false;
   string modules_3d = "#  Load  \"dri\"\n#  Load  \"glx\"\n";

   if (lookup(xserver_3d, "has_3d", false) == false)
   {
       have_3d_accel = false;
   }
   else
   {
       map current_xserver = xserver_3d;
       have_3d_accel = true;
       string modules_3d = "  Load  \"dri\"\n  Load  \"glx\"\n";
   }
   y2debug("current_xserver: %1, have_3d_accel: %2", current_xserver, have_3d_accel);

   //
   // xservername in the GUI
   //
   string x_server_info = "*not assigned*";

   string x_server_name = lookup ( current_xserver, "server","*not found*");

   //
   // get XFree version of currently selected xserver
   //
   string xfree_version = lookup(current_xserver, "version", "3");
   y2debug("xfree_version: %1", xfree_version );

   //
   // keyboard
   //

   string keyboard = lookup (user_settings, "keyboard", "english-us");

   // searching keyboard settings in keyboard.ycp according to user_settings

   map keyboardmap1 = select ( SCR::Read(.probe.keyboard), 0, $[] );
   map keyboardmap2 = select ( lookup ( keyboardmap1, "keyboard", [$[]]), 0, $[] );
   string xkbmodel = lookup ( keyboardmap2, "xkbmodel", "type5" );

   // try translated keyboard.ycp first, if this doesnt exist
   // use the raw (untranslated) version
   map all_keyboards = ReadAlternateFile ("keyboard_db.ycp", "keyboard_raw.ycp");
   map keyboards = $[];

   // generate keyboard-setting depending on hardware
   foreach ( `key, `description, all_keyboards, ``{
      if ( size ( description ) == 2 )
      {
          map keyboards_archi = select ( description, 1, $[] );

          map keyboard_archi = lookup ( keyboards_archi, Arch::architecture, $[] );
          map keyboard_model = lookup ( keyboard_archi, xkbmodel, $[] );
          if ( size(keyboard_model) > 0 )
          {
              // entry found
              list keyboard_selected = [];
              keyboard_selected = add ( keyboard_selected,
                                        select ( description, 0, $[] ));
              keyboard_selected = add ( keyboard_selected,
                                        keyboard_model );
              keyboards = add ( keyboards, key,  keyboard_selected );
          }
      }
   });

   list desc = lookup ( keyboards, keyboard, []);
   list source_list = lookup (select ( desc, 1, $[] ), "qt", [] );

   //Keyboard Protocol
   string keyboard_kbdprot = "Standard";

   // Rule set, XFree86
   string keyboard_xkbrules = "xfree86";
   string buffer = select ( source_list, 0, "" );
   if ( size ( buffer ) > 0 )
   {
     keyboard_xkbrules = buffer;
   }

   string keyboard_keycodes = select ( source_list, 1, "" );
   string keyboard_symbol   = select ( source_list, 4, "" );
   string keyboard_geometry = select ( source_list, 5, "" );

   //*********************
   // end global variables
   //************************************************************************
   //************************************************************************
   // function definitions
   //*********************

   //
   // change xserver
   // Return: `next, `abort
   //
   define setXserver( )
   ``{
       //
       // set currently selected xserver in the user settings for
       // inst_video_data and inst_xf86config
       //
       user_settings = add(user_settings, "current_xserver", current_xserver);

       //
       // get name of current xserver
       //
       x_server_name = lookup ( current_xserver, "server","*not found*");

       //
       // get current XFree version
       //
       xfree_version = lookup(current_xserver, "version", "3");

       //
       // set xserver information string in the GUI
       //
       if ( xfree_version == "4" )      // XFree86 4.0
       {
           x_server_info =      sformat(
                                        // X server information string:
                                        // %1 will be substituted with the name of the Module to use
                                        // (e.g. "nvidia").
                                        UI( _("XFree86 4 module: %1") ), x_server_name );
       }
       else     // XFree86 3.3.6
       {

           x_server_info =      sformat(
                                        // X server information string:
                                        // %1 will be substituted with the name of the X server to use
                                        // (e.g. "SVGA").
                                        UI( _("XFree86 3 server: %1") ), x_server_name );
       }
     };

  //****************************
  // End of function definitions
  //***********************************************************************************

  //
  // get data of primary display adapter
  //
  list vga = SCR::Read(.probe.bios_video);
  map display = select ( vga, 0, $[] ); // first entry

  string  video_card_name = lookup ( display ,"sub_vendor", "" ) +
      " " + lookup ( display ,"sub_device", "" );

  string video_card_info = sformat (
                                    // Video card information string:
                                    // %1 will be substituted with the name of the video card
                                    // (e.g. "Hyper VGA DeLuxe Pro"),
                                    UI( _("%1 ") ),
                                    video_card_name );

  // Build window contents

  term buttonbox = `VBox();
  buttonbox = add(buttonbox, `VSpacing(0.8) );
  buttonbox = add(buttonbox, `Left(`RadioButton(`id(`no_x11),
                    _("&No X11 configuration"), false)));
  buttonbox = add(buttonbox, `VSpacing(0.8) );
  buttonbox = add(buttonbox, `Left(`RadioButton(`id(`write_x11),
                    _("&Write XF86Config"), false)));
  buttonbox = add(buttonbox, `VSpacing(0.8) );


  term contents = `HBox(`HWeight( 3, `HStretch() ),
			`HWeight( 100, `VBox( `Left (`Label ( video_card_info )),
					      `Left (`Label ( `id( `id_server_info ), "                                              " )),
					      `VSpacing(),
	                                       `Frame ( _("Please select"),
                                                       `RadioButtonGroup(`id(`options), buttonbox)
                                               ),
					      `VSpacing(),
					      `VStretch()
					      )
				  ),
			`HWeight( 3, `HStretch() )
			);


  //********************
  // End of GUI elements
  //***********************************************************************************
  //***********************************************************************************
  // help texts
  //***********

  // Help text (HTML-like) START
  string help_text = UI( _("<p>
Choose the X Window <b>Desktop Settings</b>.
</p>
") );

  // Help text (HTML-like) continued
  help_text = help_text + UI( _("<p>
The video card shown has automatically been detected.
The appropriate X server for this video card has been chosen accordingly.
</p>") );

  // Help text (HTML-like) continued
  help_text = help_text + UI( _("<p>
Select <b>No X11 configuration</b> to skip X Window configuration.
You can manually configure X11 later (using <b><i>sax</i></b>) if you wish.
</p>
") );

   //******************
   // End of help texts
   //***********************************************************************************
   //***********************************************************************************
   // initial
   //********

   //
   // set the current xserver and do do all that's necessary
   //
   any ret = setXserver();

   //
   //
   //
   integer xresult = SCR (`Execute (.target.bash, "/usr/X11R6/bin/switch2mesasoft"));
   if ( xresult != 0 )
      y2error("Initial calling script /usr/X11R6/bin/switch2mesasoft failed: <%1>", xresult );
   else
      y2milestone("Initial calling script /usr/X11R6/bin/switch2mesasoft OK");

   if ( have_3d_accel == true )
   {
      //
      // Activate the right 3D modules for the current graphics card
      //
      string script3d = lookup( current_xserver, "script3d", "" );

      if ( script3d != "" )
      {
         integer xresult = SCR (`Execute (.target.bash, "/usr/X11R6/bin/" + script3d));

         if ( xresult != 0 )
            y2error("Calling script <%1> failed: <%2>", script3d, xresult );
	 else
            y2milestone("Calling script /usr/X11R6/bin/%1 OK", script3d);
      }
      else
      {
         y2error("No script3d entry in xserver data: <%1>", current_xserver );
      }
   }

   //
   // show GUI
   //
   Wizard::SetContents(
			   // Headline for X11 configuration screen:
			   // The user selects screen resolution and color depth.
			   _("Desktop Settings"),
			   contents,
			   help_text,
			   Args(0),	// have_back_button
			   Args(1)		          	// have_next_button
			   );

   //
   // show current X server
   //
   UI::ChangeWidget(`id(`id_server_info ), `Value, x_server_info);

   //***************
   // End of initial
   //*******************************************************************************
   //*******************************************************************************
   // Event loop
   //***********

  any option = nil;
  integer xresult = 0;
  boolean ok = true;

  repeat
      {
	  ret = UI::UserInput();

	  y2milestone("UserInput: %1", ret );

	  if ( ret == `abort && CallFunction(`inst_confirm_abort(`incomplete) ) )
	      return `abort;

	  if ( ret == `cancel )
		break;

	  if ( ret == `next )
	  {
	     option = UI::QueryWidget(`id(`options), `CurrentButton);
 	     y2milestone("Option: %1", option );
             if (option == nil)
             {
                UI::MessagePopup(_("Choose one of the
options to continue.
"));
                continue;
             }
             else if (option == `no_x11)
             {
		// no server settings
		monitor = add ( monitor,"no_x11_selected", true );
		user_settings = add ( user_settings, "monitor", monitor );
                // Do nothing cause user didn't want X11 to be configured
                SCR (`Execute (.target.remove, "/etc/X11/XF86Config"));	// XFree86 4.0
                SCR (`Execute (.target.remove, "/etc/XF86Config"));	// XFree86 3.3.6
                SCR (`Execute (.target.remove, "/var/X11R6/bin/X"));	// both
                return `next;
	     }
	     else if (option == `write_x11)
             {
                SCR (`Execute (.target.remove, "/etc/X11/XF86Config"));	// XFree86 4.0
                SCR (`Execute (.target.remove, "/etc/XF86Config"));	// XFree86 3.3.6
                if ( xfree_version == "4" )      // XFree86 4.0
                {
                   SCR (`Write   (.target.string, "/etc/X11/XF86Config",
  "# Created by YaST2\n"
+ "\n"
+ "Section \"ServerLayout\"\n"
+ "  Identifier    \"YaST2 Configured\"\n"
+ "  Screen         0 \"Screen0\" 0 0\n"
+ "  InputDevice   \"Mouse0\" \"CorePointer\"\n"
+ "  InputDevice   \"Keyboard0\" \"CoreKeyboard\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"Files\"\n"
+ "  RgbPath       \"/usr/X11R6/lib/X11/rgb\"\n"
+ "  ModulePath    \"/usr/X11R6/lib/modules\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/local\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/misc:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/75dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/100dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/Type1\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/URW\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/Speedo\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/PEX\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/cyrillic\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin2/misc:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin2/75dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin2/100dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin2/Type1\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin7/75dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/baekmuk:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/japanese:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/kwintv\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/truetype\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/uni\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/CID\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/ucs/misc\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/ucs/75dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/ucs/100dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/misc:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/75dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/100dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/Type1\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/misc/sgi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/xtest\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"Module\"\n"
+ "  Load  \"dbe\"\n"
+ "  Load  \"type1\"\n"
+ "  Load  \"speedo\"\n"
+ modules_3d
+ "  Load  \"extmod\"\n"
+ "  Load  \"freetype\"\n"
+ "#  Load  \"pex5\"\n"
+ "#  Load  \"record\"\n"
+ "#  Load  \"xie\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"InputDevice\"\n"
+ "  Identifier  \"Keyboard0\"\n"
+ "  Driver      \"keyboard\"\n"
+ "  Option      \"Protocol\"    \"" + keyboard_kbdprot  + "\"\n"
+ "  Option      \"XkbKeycodes\" \"" + keyboard_keycodes + "\"\n"
+ "  Option      \"XkbModel\"    \"" + xkbmodel          + "\"\n"
+ "  Option      \"XkbRules\"    \"" + keyboard_xkbrules + "\"\n"
+ "  Option      \"XkbLayout\"   \"us\"\n"
+ "  Option      \"XkbGeometry\" \"" + keyboard_geometry + "\"\n"
+ "  Option      \"XkbSymbols\"  \"" + keyboard_symbol   + "\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"InputDevice\"\n"
+ "  Identifier  \"Mouse0\"\n"
+ "  Driver      \"mouse\"\n"
+ "  Option      \"Protocol\" \"MouseSystems\"\n"
+ "  Option      \"Device\" \"/dev/sunmouse\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"Monitor\"\n"
+ "  Identifier   \"Monitor0\"\n"
+ "  VendorName   \"Monitor Vendor\"\n"
+ "  ModelName    \"Monitor Model\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"Device\"\n"
+ "  Identifier  \"Card0\"\n"
+ "  Driver      \""+x_server_name + "\n"
+ "EndSection\n"
+ "\n"
+ "Section \"Screen\"\n"
+ "  Identifier   \"Screen0\"\n"
+ "  Device       \"Card0\"\n"
+ "  Monitor      \"Monitor0\"\n"
+ "  #DefaultDepth " + "32" + "\n"
+ "  SubSection   \"Display\"\n"
+ "        Depth     1\n"
+ "  EndSubSection\n"
+ "  SubSection   \"Display\"\n"
+ "        Depth     4\n"
+ "  EndSubSection\n"
+ "  SubSection   \"Display\"\n"
+ "        Depth     8\n"
+ "  EndSubSection\n"
+ "  SubSection   \"Display\"\n"
+ "        Depth     15\n"
+ "  EndSubSection\n"
+ "  SubSection   \"Display\"\n"
+ "        Depth     16\n"
+ "  EndSubSection\n"
+ "  SubSection   \"Display\"\n"
+ "        Depth     24\n"
+ "  EndSubSection\n"
+ "  SubSection   \"Display\"\n"
+ "        Depth     32\n"
+ "  EndSubSection\n"
+ "EndSection\n"
+ "\n"
+ "Section \"DRI\"\n"
+ "EndSection\n"
+ "\n"));

                   if ( !SCR (`Execute (.target.symlink, "/usr/X11R6/bin/XFree86", "/var/X11R6/bin/X")) )
                   {
                      y2error("Linking X-server XFree86 failed: %1", xresult );
                      ok = false;     // X configuration not successful
                   }

                   //
                   // establish XFree86 4.0.x as the currently activated XFree version.
                   //
                   // xresult = SCR (`Execute (.target.bash, "/usr/X11R6/bin/switch2xf86-4"));

                   //if ( xresult != 0 )
                   //{
                   //    y2error("Calling switch2xf86-4 script failed: %1", xresult );
                   //    ok = false;     // X configuration not successful
                   //}
                }
                else
                {
                   SCR (`Write   (.target.string, "/etc/XF86Config",
  "# Created by YaST2\n"
+ "Section \"Files\"\n"
+ "  RgbPath       \"/usr/X11R6/lib/X11/rgb\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/75dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/local\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/misc:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/100dpi:unscaled\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/Type1\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/URW\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/Speedo\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/misc\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/75dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/100dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/PEX\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/cyrillic\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin2/misc\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin2/75dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin2/100dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/latin7/75dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/kwintv\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/truetype\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/uni\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/ucs/misc\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/ucs/75dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/ucs/100dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/misc\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/75dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/100dpi\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/hellas/Type1\"\n"
+ "  FontPath      \"/usr/X11R6/lib/X11/fonts/xtest\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"ServerFlags\"\n"
+ "  AllowMouseOpenFail\n"
+ "EndSection\n"
+ "\n"
+ "Section \"Module\"\n"
+ "EndSection\n"
+ "\n"
+ "Section \"Keyboard\"\n"
+ "  Protocol    \"" + keyboard_kbdprot  + "\"\n"
+ "  XkbRules    \"" + keyboard_xkbrules + "\"\n"
+ "  XkbModel    \"" + xkbmodel          + "\"\n"
+ "  XkbLayout   \"us\"\n"
+ "  XkbKeycodes \"" + keyboard_keycodes + "\"\n"
+ "  XkbGeometry \"" + keyboard_geometry + "\"\n"
+ "  XkbSymbols  \"" + keyboard_symbol   + "\"\n"
+ "EndSection\n"
+ "\n"));

                   if ( !SCR (`Execute (.target.symlink, "/usr/X11R6/bin/"+x_server_name, "/var/X11R6/bin/X")) )
                   {
                       y2error("Linking X-server %1 failed: %2", xservername, xresult );
                       ok = false;     // X configuration not successful
                   }

                   //
                   // establish XFree86 3x as the currently activated XFree version.
                   //
                   //xresult = SCR (`Execute (.target.bash, "/usr/X11R6/bin/switch2xf86-3x"));

                   //if ( xresult != 0 )
                   //{
                   //    y2error("Calling switch2xf86-3x script failed: %1", xresult );
                   //    ok = false;     // X configuration not successful
                   //}
            }

            // If everything above was ok
            if ( ok )
            {
              // Switch to graphical login

              // check for Kde vs. Gnome, see inst_finish

              list current_sel     = SCR::Read(.package.selInstallSet);
              string default_dm = "kdm";
              if (contains (current_sel, "Gnome")
                  && contains (current_sel, "Minimal")
                  && (!contains (current_sel, "Kde")))
                  default_dm = "xdm";

              SCR::Write(.sysconfig.CHECK_INITTAB, "yes" );
	      SCR::Write(.sysconfig, nil ); // flush
              SCR::Write(.sysconfig.displaymanager.DISPLAYMANAGER, default_dm );
              SCR::Write(.sysconfig.displaymanager, nil );
            }
            else
            {
              y2error("X configuration not successful --> no graphical login" );
              return `cancel;      // user did not complete X-configuration (cancel....)
            }

            monitor = add ( monitor,"settingsChecked", true );
            user_settings = add ( user_settings, "monitor", monitor );
	    return `next;
          }
	}
      } until ( ret == `back);

  // *****************
  // End of Event loop
  // *******************************************************************************
  // *******************************************************************************
}


// -EOF-
