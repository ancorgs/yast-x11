#!/usr/bin/perl -w
#
# Import a Sax monitor description file and create a YCP file 
# with the same contents. 
#
# Author: Stefan Hundhammer <sh@suse.de>

use strict;
use English;

my $sax_monitor_file	= "Monitors";
my $yast2_monitor_file	= "monitors.ycp";
my %monitor;
my $monitor_count	= 0;
my $record_start_line_no = 0;


# Forward declarations.

sub main();


# Call the main function and exit.
# DO NOT enter any other code outside a sub -
# any variables would otherwise be global.


main();
exit 0;


#-----------------------------------------------------------------------------


# Main program.

sub main()
{
    open ( IN, $sax_monitor_file   )       
	or die "Can't open Sax monitor description file $sax_monitor_file";

    open ( OUT, ">" . $yast2_monitor_file ) 
	or die "Can't open YaST2 monitor description file $yast2_monitor_file";

    write_header();
    interpret_sax_monitor_file();
    write_footer();

    close ( OUT );
    close ( IN );
}



#-----------------------------------------------------------------------------



# Interpret the Sax monitor description file.
# Each record in this file looks like this:
#
#	#
#	# EIZO F563-T
#	#
#	EIZO:F563-T {
#	 Hsync = 55-160
#	 Vsync = 30-86
#	}
#
# Some records look like this:
#
#	#
#	# --> VESA 1024X768@75HZ
#	#
#	--> VESA:1024X768@75HZ {
#	 Hsync = 50-85
#	 Vsync = 31-69
#	}
#
# i.e. they have a leading '--> ' (notice the blank)
# to make sure this entry is sorted before the others.
#
# This sub fills the global %monitor hash.

sub interpret_sax_monitor_file()
{
    my $line;
    my @freqs;

    while ( $line = <IN> )
    {
	# Remove leading and trailing whitespace and comments

	$line =~ s/^\s*//;
	$line =~ s/\s*$//;
	$line =~ s/#.*$//;

	if ( $line =~ /.*:.*\s*\{$/ )		# VENDOR:MODEL {
	{
	    if ( defined $monitor{"vendor"} )	# still have an old record?
	    {
		dump_monitor();			# be done with it!
		$record_start_line_no = $NR;
	    }
	    
	    # Remove unwanted trash

	    $line =~ s/\s*\{$//;		# remove trailing {
	    $line =~ s/^-+>//;			# remove leading -->


	    # Escape embedded quotes

	    $line =~ s/""/"/;			# " (re-sync emacs syntax highlighting)
            $line =~ s/"/\\"/;
	
	    ( $monitor{"vendor"}, $monitor{model} ) = split ( ':', $line, 2 );
	}
	elsif ( $line =~ /^\s*Hsync\s*=/ )	# Hsync = 50-160
	{
	    $line =~ s/^.*=\s//;		# remove "Hsync ="
	    $line =~ s/[-,\s]+/ /g;		# replace any delimiter with one blank
	    @freqs = sort { $a <=> $b } split ( " ", $line );
	    $monitor{"hsync_min"} = shift @freqs;
	    $monitor{"hsync_max"} = pop   @freqs;
	}
	elsif ( $line =~ /^\s*Vsync\s*/ )	# Vsync = 50-160
	{
	    $line =~ s/^.*=\s//;		# remove "Vsync ="
	    $line =~ s/[-,\s]+/ /g;		# replace any delimiter with one blank
	    @freqs = sort { $a <=> $b } split ( " ", $line );
	    $monitor{"vsync_min"} = shift @freqs;
	    $monitor{"vsync_max"} = pop   @freqs;
	}
    }

    if ( defined $monitor{"vendor"} )		# have a monitor left? (most likely!)
    {
	dump_monitor();				# dump it
	$record_start_line_no = $NR;
    }
}


#-----------------------------------------------------------------------------


# Write a monitor record to the out file in YCP syntax.
#
# Uses the global %monitor hash.

sub dump_monitor()
{
    if ( $monitor_count > 0 )
    {
	# Insert record delimiter
	print OUT "    ,\n";
    }
    $monitor_count++;

    
    if ( defined $monitor{"vendor"}	&&
         defined $monitor{"vendor"}	&&
         defined $monitor{"model"}	&&
         defined $monitor{"hsync_min"}	&&
         defined $monitor{"hsync_max"}	&&
         defined $monitor{"vsync_min"}	&&
         defined $monitor{"vsync_max"}    )
    {
	# Write record

	print OUT <<"EOF";
    \$[
        vendor:		"$monitor{"vendor"}",
	model:		"$monitor{"model"}",
	min_hsync:	$monitor{"hsync_min"},
	max_hsync:	$monitor{"hsync_max"},
	min_vsync:	$monitor{"vsync_min"},
	max_vsync:	$monitor{"vsync_max"}
    ]
EOF
    }
    else
    {
	print STDERR "$sax_monitor_file:$record_start_line_no: ERROR: Incomplete monitor entry: ";
	print STDERR $monitor{"vendor"} . " ";
	print STDERR $monitor{"model"}  . "\n";
	print STDERR "\thsync_min: " . ( defined $monitor{"hsync_min"} ? $monitor{"hsync_min"} : "UNDEFINED" );
	print STDERR " hsync_max: "  . ( defined $monitor{"hsync_max"} ? $monitor{"hsync_max"} : "UNDEFINED" );
	print STDERR " vsync_min: "  . ( defined $monitor{"vsync_min"} ? $monitor{"vsync_min"} : "UNDEFINED" );
	print STDERR " vsync_max: "  . ( defined $monitor{"vsync_max"} ? $monitor{"vsync_max"} : "UNDEFINED" );
	print STDERR "\n\n";
    }

    # Invalidate this record
    undef %monitor;
}


#-----------------------------------------------------------------------------


# Write out file header:
# Notice about auto-generated file and list beginning.

sub write_header()
{
    print OUT <<'EOF';

//
// This file is auto generated by import_sax_monitors.
//
// DO NOT EDIT !
//

[
EOF
}


#-----------------------------------------------------------------------------


# Write out file footer:
# List End.


sub write_footer()
{
    print OUT <<'EOF';

];

EOF
}



# EOF
